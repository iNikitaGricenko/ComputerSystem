version: "3.7"
services:
  # Start Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  # End Zookeeper
  # Start Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  # End Kafka
  # Start Mysql
  mysql:
    image: mysql
    container_name: mysql-eshop
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=WolFHacK702
      - MYSQL_DATABASE=eshop
    ports:
      - "3306:3306"
  # End Mysql
  # Start Mongo
  mongodb:
    image: mongo
    container_name: mongo-eshop
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
  mongo-express:
    image: mongo-express
    container_name: mongo-express-eshop
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongo-eshop
    depends_on:
      - mongodb
  # End Mongo
  # Start Elastic
  elasticsearch-main-chain:
    image: elasticsearch:7.16.2
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.zen.minimum_master_nodes=2
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    networks:
      - esnet
  elasticsearch-second-chain:
    image: elasticsearch:7.16.2
    container_name: elasticsearch-second-chain
    restart: unless-stopped
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.zen.minimum_master_nodes=2
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet
  kibana:
    image: kibana:7.16.2
    container_name: kibana
    environment:
      SERVER_NAME: kibana.local
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - '5601:5601'
    networks:
      - esnet
  headPlugin:
    image: mobz/elasticsearch-head:5
    container_name: elastic-head
    ports:
      - '9100:9100'
    networks:
      - esnet
  # End Elastic
  # Start Redis
  redis:
    image: 'bitnami/redis:latest'
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - redis-network
  # End Redis

  # Start Cloud
  eureka-server:
    container_name: eureka
    build:
      context: ./Eureka/
      dockerfile: Dockerfile-dev
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  gateway-server:
    container_name: gateway
    build:
      context: ./Gateway/
      dockerfile: Dockerfile-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
      - auth-server
  auth-server:
    container_name: auth-server
    build:
      context: ./OAuth2/
      dockerfile: Dockerfile-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
      - mysql
  # End Cloud

  # Start Services
  product-service:
    container_name: product-service
    build:
      context: ./ProductService/
      dockerfile: Dockerfile-dev
    restart: unless-stopped
    ports:
      - "8091:8091"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
      - gateway-server
      - mongodb
  customer-service:
    container_name: customer-service
    build:
      context: ./CustomerService/
      dockerfile: Dockerfile-dev
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server
      - gateway-server
      - mysql
# End Services

volumes:
  data: {}
  esdata1:
    driver: local
  esdata2:
    driver: local
networks:
  default:
    name: mongo-eshop_network
  redis-network:
    driver: bridge
  esnet: